{
  "hash": "e763012b4fae1ba0b92749d27fa1ca1a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Practice Exercise: Computing Centrality Measures\"\nsubtitle: \"Week 2 - Network Analytics\"\n---\n\n## Exercise Overview\n\n**Task:** Calculate centrality measures for a collaboration network and interpret the results.\n\n**Network Description:**\n\n- 15-node collaboration network\n- Undirected edges (mutual relationships)\n- Nodes represent team members\n- Edges represent working relationships\n\n## Questions\n\n1. Which node has the highest **degree centrality**?\n2. Which node has the highest **betweenness centrality**?\n3. Which node has the highest **closeness centrality**?\n4. Which nodes have the highest **clustering coefficient**?\n5. How do these metrics correlate with each other?\n\n---\n\n## Network Initialization and Visualization\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(igraph)\nlibrary(ggraph)\n\n# Create a larger exercise network (15 nodes)\nset.seed(999)\nedges_exercise <- data.frame(\n  from = c(1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 13, 13, 14),\n  to = c(2, 3, 4, 3, 5, 4, 5, 5, 6, 6, 7, 8, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 15, 15)\n)\n\ng_exercise <- graph_from_data_frame(edges_exercise, directed = FALSE)\n\n# Plot the network\nggraph(g_exercise, layout = 'fr') +\n  geom_edge_link(color = \"#D3D3D3\", width = 1.5, alpha = 0.6) +\n  geom_node_point(color = \"#c41c85\", size = 12) +\n  geom_node_text(aes(label = name), color = \"white\", size = 4) +\n  scale_x_continuous(expand = expansion(mult = 0.2)) +\n  scale_y_continuous(expand = expansion(mult = 0.2)) +\n  theme_void() +\n  theme(\n    plot.background = element_rect(fill = \"white\", color = NA)\n  )\n```\n\n::: {.cell-output-display}\n![](perform_0_files/figure-revealjs/unnamed-chunk-1-1.png){fig-align='center' width=768}\n:::\n:::\n\n",
    "supporting": [
      "perform_0_files/figure-revealjs"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}